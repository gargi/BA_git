((= Notebook input/output style =))

((= Latex base template (must inherit)
This template builds upon the abstract template, adding common latex output
functions.  Figures, data_text,
This template does not define a docclass, the inheriting class must define this.=))

((*- extends 'display_priority.tplx' -*))

%===============================================================================
% Abstract overrides
%===============================================================================

((* block body *))
    ((* block predoc *))
    ((* block abstract *))((* endblock abstract *))
    ((* endblock predoc *))

    ((( super() )))

    % Add a bibliography block to the postdoc
    ((* block postdoc *))
    ((* block bibliography *))((* endblock bibliography *))
    ((* endblock postdoc *))
((* endblock body *))

%===============================================================================
% Support blocks
%===============================================================================

% Displaying simple data text
((* block data_text *))
    \begin{verbatim}
((( output.data['text/plain'] )))
    \end{verbatim}
((* endblock data_text *))

% Display python error text as-is
((* block error *))
    \begin{Verbatim}[commandchars=\\\{\}]
((( super() )))
    \end{Verbatim}
((* endblock error *))
((* block traceback_line *))
    ((( line | indent | strip_ansi | escape_latex )))
((* endblock traceback_line *))

% Display stream ouput with coloring
((* block stream *))
    \begin{Verbatim}[commandchars=\\\{\}]
((( output.text | escape_latex | ansi2latex )))
    \end{Verbatim}
((* endblock stream *))

% Display latex
((* block data_latex -*))
    ((*- if output.data['text/latex'].startswith('$'): -*))
        ((= Replace $ symbols with more explicit, equation block. =))
        \begin{equation*}\adjustbox{max width=\hsize}{$
        ((( output.data['text/latex'] | strip_dollars )))
        $}\end{equation*}
    ((*- else -*))
        ((( output.data['text/latex'] )))
    ((*- endif *))
((* endblock data_latex *))

% Default mechanism for rendering figures
((*- block data_png -*))((( draw_figure(output.metadata.filenames['image/png']) )))((*- endblock -*))
((*- block data_jpg -*))((( draw_figure(output.metadata.filenames['image/jpeg']) )))((*- endblock -*))
((*- block data_svg -*))((( draw_figure(output.metadata.filenames['image/svg+xml']) )))((*- endblock -*))
((*- block data_pdf -*))((( draw_figure(output.metadata.filenames['application/pdf']) )))((*- endblock -*))

% Draw a figure using the graphicx package.
((* macro draw_figure(filename) -*))
((* set filename = filename | posix_path *))
((*- block figure scoped -*))
    \begin{center}
    \adjustimage{max size={0.9\linewidth}{0.9\paperheight}}{((( filename )))}
    \end{center}
    { \hspace*{\fill} \\}
((*- endblock figure -*))
((*- endmacro *))

% Redirect execute_result to display data priority.
((* block execute_result scoped *))
    ((* block data_priority scoped *))
    ((( super() )))
    ((* endblock *))
((* endblock execute_result *))

% Render markdown
((* block markdowncell scoped *))
    ((( cell.source | citation2latex | strip_files_prefix | markdown2latex )))
((* endblock markdowncell *))

% Don't display unknown types
((* block unknowncell scoped *))
((* endblock unknowncell *))

%===============================================================================
% Input
%===============================================================================

((* block input scoped *))
    % Add contents below.

{\par%
\vspace{-1\baselineskip}%
\needspace{4\baselineskip}}%
\begin{notebookcell}[((( cell.prompt_number )))]%
\begin{addmargin}[\cellleftmargin]{0em}% left, right
{\smaller%
\par%
((* block extra_input_spacing *))((* endblock extra_input_spacing *))%
\vspace{-1\smallerfontscale}%
((( cell.source | highlight2latex )))%
\par%
\vspace{-1\smallerfontscale}}%
\end{addmargin}
\end{notebookcell}

((* endblock input *))

%===============================================================================
% Output
%===============================================================================

((* block output -*))
    \par\vspace{1\smallerfontscale}%
    \needspace{4\baselineskip}%
    % Only render the prompt if the cell is pyout.  Note, the outputs prompt 
    % block isn't used since we need to check each indiviual output and only
    % add prompts to the pyout ones.
    ((* if output.output_type in ['pyout'] *))
        {\par%
        \vspace{-1\smallerfontscale}%
        \noindent%
        ((( draw_prompt("Out", cell.prompt_number, "nbframe-out-prompt", "0em") )))%
        ((* block extra_output_spacing *))((* endblock extra_output_spacing *))}%
    ((* endif *))%
    %
    \begin{addmargin}[\cellleftmargin]{0em}% left, right
    {\smaller%
    \vspace{-1\smallerfontscale}%
    ((( super() )))}%
    \end{addmargin}%
((*- endblock output *))

%==============================================================================
% Support Macros
%==============================================================================

% Name: draw_prompt
% Purpose: Renders an output/input prompt for notebook style pdfs
((* macro draw_prompt(prompt, number, color, space) -*))
    \begin{minipage}{\cellleftmargin}%
    \hfill%
    {\smaller%
    \tt%
    \color{(((color)))}%
    (((prompt)))[(((number)))]:}%
    \hspace{\inputpadding}%
    \hspace{(((space)))}%
    \hspace{3pt}%
    \end{minipage}%
((*- endmacro *))